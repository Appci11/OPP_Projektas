@page "/chat"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>SignalR Chat</PageTitle>

@if (!IsConnected)
{
    <div class="input-group">
        <input @bind="username" class="form-control" placeholder="What's your name?">
        <button class="btn btn-primary form-control-append" @onclick="Connect">
            Connect
        </button>
    </div>
}
else
{
    <textarea style="width : 100%; height: 500px; " @ref="TextAreaRef" readonly="readonly">
        @messages
    </textarea>
    <div class="input-group">
        <input @bind-value="message"
           @bind-value:event="oninput"
           @onkeyup="HandleInput"
           class="form-control">
        <button class="btn btn-primary form-group-append"
            @onclick="Send"
            disabled="@(!IsConnected)">
            Send
        </button>
    </div>
    <button class="btn btn-secondary" @onclick="Undo"disabled="@(!IsConnected)">Undo</button>
    <button class="btn btn-secondary" @onclick="Redo"disabled="@(!IsConnected)">Redo</button>
}

@code {
    private HubConnection? hubConnection;
    private string messages = string.Empty;
    private string username = string.Empty;
    private string message = string.Empty;
    ElementReference TextAreaRef;

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
            //.WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            //to pass smth can use query strings
            .WithUrl(NavigationManager.ToAbsoluteUri($"/chathub?username={username}"))

            .Build();

        hubConnection.On<List<Message>>("ReceiveMessages", (Msgs) =>
        {
            messages = string.Empty;
            foreach(Message msg in Msgs)
            {
                messages += $"{msg.Username}: {msg.Msg} \n";
            }
            //sad
            JSRuntime.InvokeVoidAsync("scrollToBottom", TextAreaRef);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection != null)
        {
            //siuncia signala i signalR hub
            await hubConnection.SendAsync("AddMessageToChat", username, message);
            message = string.Empty;
        }
    }

    private async Task Undo()
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("UndoAction");
        }
    }

    private async Task Redo()
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("RedoAction");
        }
    }

    private async Task HandleInput(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter"))
        {
            await Send();
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}