@using OPP_Projektas.Client.Pages
@using OPP_Projektas.Shared.Models.BorderDecorator;


<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Casino</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div style="margin-top:3px;margin-bottom:10px; border:solid 1px; background-color:white" @onclick="ChangeBorder">Change border</div>
    </div>
</div>

<div >

</div>

<div style="@borderStyle" class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="slots">
                <span class="oi oi-dollar" aria-hidden="true"></span> Slots
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="blackjack">
                <span class="oi oi-dollar" aria-hidden="true"></span> Black Jack
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="roulette">
                <span class="oi oi-dollar" aria-hidden="true"></span> Roulette
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="fetchdata">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
            </NavLink>
        </div>
        <Chat />
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    BorderDesign borderDesign;
    private string borderStyle = "";
    int ii = 0;

    private async void ChangeBorder()
    {
        switch (ii)
        {
            case 0:
                borderDesign = new BorderSize("12px");
                var HDD = new HalloweenDesignDecorator(borderDesign);
                Console.WriteLine("decorator.Decorate(): " + HDD.Decorate(""));
                borderStyle = HDD.Decorate("");
                ii++;
                break;
            case 1:
                borderDesign = new BorderSize("12px");
                var CDD = new ChristmasDesignDecorator(borderDesign);
                Console.WriteLine("borderDesign.Decorate(): " + CDD.Decorate(""));
                borderStyle = CDD.Decorate("");
                ii++;
                break;
            case 2:
                borderDesign = new BorderSize("12px");
                var EDD = new EasterDesignDecorator(borderDesign);
                Console.WriteLine("borderDesign.Decorate(): " + EDD.Decorate(""));
                borderStyle = EDD.Decorate("");
                ii++;
                break;
            case 3:
                borderDesign = null;
                borderStyle = "";
                ii = 0;
                break;
        }
        //await InvokeAsync(StateHasChanged);
    }
}
