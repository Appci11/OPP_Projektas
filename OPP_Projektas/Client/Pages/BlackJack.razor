@page "/blackjack"
@using OPP_Projektas.Shared.Models.BlackJack
@using OPP_Projektas.Shared.Models.Styles
@using OPP_Projektas.Shared.Models.Cards
@inject NavigationManager NavigationManager

<PageTitle>BlackJack</PageTitle>
<div style="display:flex">
    <div>
        <h1>BlackJack</h1>

        <div>
            <p role="status">Balance: @Player.Balance</p>
            <p role="status">@Message</p>
        </div>

        <table hidden="@_hideTable">
            <tr>
                @foreach (var card in Dealer.Cards)
                {
                    <td style="@CardsStyle.RenderCardBorder()">@card.Suit.ToString() | @card.FaceValue.ToString()</td>
                }
                @if (Dealer.Cards.Count > 0)
                {
                    <td>@Dealer.Cards.Sum(c => c.ScoreValue)</td>
                }
            </tr>
            <tr>
                @foreach (var card in Player.Cards)
                {
                    <td style="@CardsStyle.RenderCardBorder()">@card.Suit.ToString() | @card.FaceValue.ToString()</td>
                }
                @if (Player.Cards.Count > 0)
                {
                    <td>@Player.Cards.Sum(c => c.ScoreValue)</td>
                }
            </tr>
        </table>
    </div>
</div>

<button class="btn btn-primary" hidden="@_hideJoinButton" @onclick="JoinTable">Join table</button>
<div hidden="@_hideBetBtn">
    <input @bind="BetSize" type="number" aria-label="Bet size:"/>
    <button class="btn btn-primary" @onclick="Bet">Place Bet</button>
</div>
<div hidden="@_hidePlayButtons">
    <button disabled="@_loading" class="btn btn-primary" @onclick="DrawCard">Hit me!</button>
    @if (Player.CanDoubleDown)
    {
        <button disabled="@_loading" class="btn btn-warning" @onclick="DoubleDown">Double down!</button>
    }
    <button disabled="@_loading" class="btn btn-secondary" @onclick="PlayerStands">Stand</button>
</div>
<hr/>
<button class="btn btn-info" @onclick="ChangeCardsStyle">Changed slots style</button>

@code {
    private IStyle _style = new DefaultStyle();
    private static HubConnection? _hubConnection;
    private bool _hideJoinButton;
    private bool _hideBetBtn = true;
    private bool _hidePlayButtons = true;
    private bool _loading;
    private string StartBtnLabel = "Start game";
    private bool _initialPhaseDone;
    private bool _hideTable;
    private bool _playerStands;
    private Timer _timer;
    private int totalTime = 60;
    private static readonly int _maxBet = 100;

    public BlackJackPlayer Player = new(_hubConnection, _maxBet);
    public BlackJackDealer Dealer = new(_hubConnection);

    public string Message { get; set; }
    public int BetSize { get; set; } = 1;
    public ICardStyle CardsStyle { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CardsStyle = _style.CreateCardsStyle();
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/blackjackhub"))
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<BlackJackPlayer>("UpdatePlayer", (player) =>
        {
            Player = player;
            InvokeAsync(StateHasChanged);
        });
        _hubConnection.On<BlackJackPlayer>("NewPlayerJoined", NewPlayerJoined);
        _hubConnection.On("BettingPhaseStarted", async () =>
        {
            _hideBetBtn = false;
            Message = "Betting ends in: 60 seconds";
            await InvokeAsync(StateHasChanged);
            await RunTimer();
        });
        _hubConnection.On("BettingPhaseDone", async () =>
        {
            Message = "Betting done!";
            _hideBetBtn = true;
            _hideTable = false;
            await _timer.DisposeAsync();
            await _hubConnection.SendAsync("Play");
            await InvokeAsync(StateHasChanged);
        });
        _hubConnection.On("InitialDealPhase", () => Message = "Dealing cards..");
        _hubConnection.On("InitialDealPhaseOver", async () =>
        {
            Message = "Initial dealing phase is over";
            _hidePlayButtons = false;
            _initialPhaseDone = true;
            await InvokeAsync(StateHasChanged);
        });
        _hubConnection.On<Guid, BlackJackCard>("CardDealt", async (playerId, card) =>
        {
            if (playerId.Equals(Dealer.Id))
            {
                Message = "";
                Dealer.Cards.Add(card);
            }
            else
            {
                Player.Cards.Add(card);
                Message = "";
                if (_initialPhaseDone && !_hidePlayButtons)
                {
                    Message = "Dealer drawing card";
                    Dealer.RequestCard();
                }
            }
            CheckWinner(Dealer.Cards.Sum(c => c.ScoreValue), Player.Cards.Sum(c => c.ScoreValue));
            await InvokeAsync(StateHasChanged);
        });

        _hubConnection.On("BettingPhaseDone", () =>
        {
            Message = "Betting finished. Dealer drawing cards"; 
            _hideBetBtn = true;
        });

        await _hubConnection.StartAsync();
        Console.WriteLine("Connection established");
        Player.HubConnection = _hubConnection;
        Dealer.HubConnection = _hubConnection;
        Player.Balance = 500;
        await _hubConnection.SendAsync("CreateNewTable", Dealer);
        await InvokeAsync(StateHasChanged);
    }

    private void Payouts()
    {
    // BlackJackPlayer.Balance += (int)(BlackJackPlayer.Bet * 1.5);
    }

    private void CheckWinner(int dealerScore, int playerScore)
    {
        switch (dealerScore)
        {
            case 21:
                _hidePlayButtons = true;
                Message = "BLACKJACK! House wins!";
                SetupRestartButton();
                break;
            case > 21:
                _hidePlayButtons = true;
                Message = "You won";
                SetupRestartButton();
                Payouts();
                break;
            case < 21:
                _loading = false;
                break;
        }
        switch (playerScore)
        {
            case 21:
                _hidePlayButtons = true;
                Message = "BLACKJACK! You win!";
                SetupRestartButton();
                Payouts();
                break;
            case > 21:
                _hidePlayButtons = true;
                Message = "House wins";
                SetupRestartButton();
                break;
            case < 21:
                _loading = false;
                break;
        }
        if (!_playerStands) return;
        if (dealerScore > playerScore)
        {
            Message = "House wins";
            SetupRestartButton();
        }
        else if (dealerScore < playerScore)
        {
            Message = "Player wins";
            SetupRestartButton();
            Payouts();
        }
        else
        {
            Message = "Draw!";
            SetupRestartButton();
            Player.Balance += Player.Bet;
        }
    }

    private void SetupRestartButton()
    {
        StartBtnLabel = "Restart game";
    }

    private async Task JoinTable()
    {
        if (_hubConnection is not null)
        {
            Message = "Joined";
            await _hubConnection.SendAsync("PlayerJoined", Player);
            _hideJoinButton = true;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task NewPlayerJoined(BlackJackPlayer player)
    {
        Console.WriteLine($"New player joined {player.Id} with balance {player.Balance}");
        _hideBetBtn = false;

        await InvokeAsync(StateHasChanged);
    }

    private async Task Bet()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.SendAsync("PlayerBet", Player, BetSize);
            _hideBetBtn = true;

            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ChangeCardsStyle()
    {
        if (typeof(DefaultStyle) == _style.GetType())
        {
            _style = new RedStyle();
            CardsStyle = _style.CreateCardsStyle();
        }
        else if (typeof(RedStyle) == _style.GetType())
        {
            _style = new BlueStyle();
            CardsStyle = _style.CreateCardsStyle();
        }
        else if (typeof(BlueStyle) == _style.GetType())
        {
            _style = new DefaultStyle();
            CardsStyle = _style.CreateCardsStyle();
        }
        await InvokeAsync(StateHasChanged);
    }

    private async Task DrawCard()
    {
        if (_hubConnection != null)
        {
            Player.RequestCard();
            Message = "Drawing card..";
            _loading = true;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task PlayerStands()
    {
        if (_hubConnection != null)
        {
            Player.Stand();
            Dealer.RequestCard();
            _playerStands = true;
            _loading = true;
            Message = "You stand!";

            await InvokeAsync(StateHasChanged);
        }
    }


    private async Task DoubleDown()
    {
        if (_hubConnection != null)
        {
            Player.DoubleDown();
            _loading = true;
            Message = "You chose to double down!";

            await InvokeAsync(StateHasChanged);
        }
    }

    private void Reset()
    {
        Dealer.Cards = new List<BlackJackCard>();
        Player.Cards = new List<BlackJackCard>();
    }

    private async Task RunTimer()
    {
        _timer = new Timer(OnTimerElapsed, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    private async void OnTimerElapsed(object? state)
    {
        totalTime--;
        Message = $"Betting ends in: {totalTime} seconds";

        if (totalTime <= 0)
        {
            Message = "Betting finished";
            await _timer.DisposeAsync();
        }

        await InvokeAsync(StateHasChanged);
    }

}