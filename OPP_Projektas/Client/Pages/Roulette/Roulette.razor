@*
Padariau atskira directory, nes planuoja but bent keli komponentai...
jei viskas i viena kruva eis... nu patys suprantam
PS. "@using blablabla" galima i _Imports.razor det, tuomet visiem puslapiam galios
*@

@page "/roulette"
@using OPP_Projektas.Client.Models.Roulette
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>Roulette</PageTitle>
<h3>Roulette</h3>

@if (!IsConnected)
{
    <div class="input-group">
        <input @bind="username" class="form-control" placeholder="What's your name?">
        <button class="btn btn-primary form-control-append" @onclick="Connect">
            Connect
        </button>
    </div>
}
else
{
    <p>Number of players: @playerCount</p>
    <p>Number of bets placed: @betsPlacedCound</p>
    <br />
    <h3>Rolled number: @rolledNumber</h3>
    <br />
    if (!betPlaced)
    {
        <button class="btn btn-primary" @onclick="PlaceABet">Place a bet</button>
        <p>Bet ammount = @betAmmount</p>
    }
    <br />
    <br />
    <p>Your chips:</p>
    <ChipsList ChipAmmounts="@NewKeeper.Chips"/>

    <p>Message log:</p>
    <ul id="messagesList">
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>
}

@code {
    private HubConnection? hubConnection;
    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    private string username = string.Empty;
    private int playerCount = 0;
    private int betsPlacedCound = 0;
    private int rolledNumber = -999;
    private bool betPlaced = false;
    int betAmmount = 3;
    //private int[] ChipAmmounts { get; set; } = { -1, -1, -1, -1, -1, -1 };
    private List<string> messages = new List<string>();

    static ChipsKeeper Keeper = new ChipsKeeper();
    static IChipsConverter Adapter = new ChipsAdapter(Keeper);
    NewChipsKeeper NewKeeper = new NewChipsKeeper(Adapter.GetChips());
    //await LocalStorage.SetItemAsync("token", token);  //local storage example
    //await LocalStorage.RemoveItemAsync("token");  //galima ir asString, pasigooglinsit jei reiks

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
            //jei nenorim nieko perduot tinka tiesiog kreiptis i hub'o endpoint'a
            //.WithUrl(NavigationManager.ToAbsoluteUri("/roulettehub"))
            //to pass smth query strings can be used
            .WithUrl(NavigationManager.ToAbsoluteUri($"/roulettehub?username={username}"))
            .Build();

        hubConnection.On<string>("GetMessage", (user) =>
        {
            var msg = user;
            if (messages.Count < 5)
            {
                messages.Add(msg);
            }
            else
            {
                messages.RemoveAt(0);
                messages.Add(msg);
            }
            //jei puslapyje kazkas kito, reiketu StateHasChanged() iskviest
            StateHasChanged();
        });

        hubConnection.On<int>("GetPlayerCount", (count) =>
        {
            playerCount = count;
            StateHasChanged();
        });

        hubConnection.On<int>("GetBetsPlacedCount", (count) =>
        {
            betsPlacedCound = count;
            StateHasChanged();
        });

        hubConnection.On<int>("GetRolledNumber", (number) =>
        {
            rolledNumber = number;
            betPlaced = false;
            StateHasChanged();
        });


        //by default reikia, ne savo isgalvota
        await hubConnection.StartAsync();
    }

    private async Task PlaceABet()
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("PlaceABet");
            betPlaced = true;
            Keeper.RemoveChips(betAmmount);
            NewKeeper.Chips = Adapter.GetChips();
        }
    }

    //copy pasta default dispose...
    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}