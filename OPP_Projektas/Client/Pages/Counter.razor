@page "/counter"
@using Microsoft.AspNetCore.SignalR.Client
@using OPP_Projektas.Shared.Models.Enums.Slots
@using OPP_Projektas.Shared.Models.Slots
@using OPP_Projektas.Shared.Models.Slots.SlotSymbols
@using OPP_Projektas.Shared.Models.Slots.SlotSymbols.Rollers
@inject NavigationManager NavigationManager

<PageTitle>Counter</PageTitle>

<div style="display:flex">
<div>
<h1>Counter</h1>



<input @bind="Name" />

<p role="status">Balance: @Balance</p>
<p role="status">@Message</p>

<div style="display: flex">
    <div style="@Results[0].Render()">
    </div>
    <div style="@Results[1].Render()">
    </div>
    <div style="@Results[2].Render()">
    </div>
</div>
</div>
<div style="margin: 50px">
    <h2>REWARDS:</h2>
    @if (!IsPictureSymbols)
    {
        <div style="display: flex;">
            <div style="background-color: #0000FF; width: 30px; height: 30px; margin: 10px;"></div>
            <p style="margin-top: 12px"> – x5</p>
        </div>
        <div style="display: flex;">
            <div style="background-color: #FF0000; width: 30px; height: 30px; margin: 10px;"></div>
            <p style="margin-top: 12px"> – x10</p>
        </div>
        <div style="display: flex;">
            <div style="background-color: #00FF00; width: 30px; height: 30px; margin: 10px;"></div>
            <p style="margin-top: 12px"> – x40</p>
        </div>
        <div style="display: flex;">
            <div style="background-color: #FFFF00; width: 30px; height: 30px; margin: 10px;"></div>
            <p style="margin-top: 12px"> – x160</p>
        </div>
        <div style="display: flex;">
            <div style="background-color: #FFA500; width: 30px; height: 30px; margin: 10px;"></div>
            <p style="margin-top: 12px"> – x1000</p>
        </div>
    }
    else
    {
        <div style="display: flex;">
            <div style="background-color: #fff; background-image: url('assets/1-first.svg'); width: 30px; height: 30px; margin: 10px;"></div>
            <p style="margin-top: 12px"> – x5</p>
        </div>
        <div style="display: flex;">
            <div style="background-color: #fff; background-image: url('assets/2-second.svg'); width: 30px; height: 30px; margin: 10px;"></div>
            <p style="margin-top: 12px"> – x10</p>
        </div>
        <div style="display: flex;">
                <div style="background-color: #fff; background-image: url('assets/3-third.svg'); width: 30px; height: 30px; margin: 10px;"></div>
            <p style="margin-top: 12px"> – x40</p>
        </div>
        <div style="display: flex;">
                <div style="background-color: #fff; background-image: url('assets/4-fourth.svg'); width: 30px; height: 30px; margin: 10px;"></div>
            <p style="margin-top: 12px"> – x160</p>
        </div>
        <div style="display: flex;">
                <div style="background-color: #fff; background-image: url('assets/5-fifth.svg'); width: 30px; height: 30px; margin: 10px;"></div>
            <p style="margin-top: 12px"> – x1000</p>
        </div>
    }
</div>
</div>

<input @bind="BetSize" type="number" />
<button class="btn btn-primary" @onclick="Play">Click me</button>
<button class="btn btn-secondary" @onclick="ChangeSlotType">Switch slot type</button>

<ul style="width: 300px">
    @foreach (var message in Messages)
    {
        <li>@message</li>
    }
</ul>
@code {
    private HubConnection? hubConnection;
    private int Balance = 500;

    public int BetSize { get; set; } = 1;
    public string Message { get; set; }
    public string Name { get; set; } = "Guest";
    public bool IsPictureSymbols { get; set; } = false;
    public List<string> Messages { get; set; } = new List<string>();
    public List<ISlotSymbol> Results { get; set; } = new List<ISlotSymbol> {};

    protected override async Task OnInitializedAsync()
    {
        SlotRoller roller = new ColorSlotRoller();
        Results.Add(roller.CreateSymbol(SymbolTier.Fifth));
        Results.Add(roller.CreateSymbol(SymbolTier.Fifth));
        Results.Add(roller.CreateSymbol(SymbolTier.Fifth));

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/slotshub")).WithAutomaticReconnect()
            .Build();

        hubConnection.On("Test", () => { Console.WriteLine("Test"); });

        hubConnection.On<SlotsResult>("Something", async (result) =>
        {
            Console.WriteLine("Tester2");
            SlotRoller fakeResultRoller;
            fakeResultRoller = IsPictureSymbols ? new PictureSlotRoller() : new ColorSlotRoller();
            List<ISlotSymbol> resultingSymbols = new List<ISlotSymbol> { fakeResultRoller.CreateSymbol(result.SlotSymbols[0]), fakeResultRoller.CreateSymbol(result.SlotSymbols[1]), fakeResultRoller.CreateSymbol(result.SlotSymbols[2]) };
            Random rand = new Random();
            for(int i = 0;i<3;i++){
                int switchingAmount = 30;
                if(i>0){
                    switchingAmount /= 2;
                }
                for (int j = 0; j < switchingAmount; j++)
                {
                    switch(i){
                        case 0:
                            Results = new List<ISlotSymbol> { fakeResultRoller.CreateSymbol((SymbolTier)rand.Next(0, 5)), fakeResultRoller.CreateSymbol((SymbolTier)rand.Next(0, 5)), fakeResultRoller.CreateSymbol((SymbolTier)rand.Next(0, 5)) };
                            break;
                        case 1:
                            Results = new List<ISlotSymbol> { Results[0], fakeResultRoller.CreateSymbol((SymbolTier)rand.Next(0, 5)), fakeResultRoller.CreateSymbol((SymbolTier)rand.Next(0, 5)) };
                            break;
                        case 2:
                            Results = new List<ISlotSymbol> { Results[0], Results[1], fakeResultRoller.CreateSymbol((SymbolTier)rand.Next(0, 5)) };
                            break;
                    }
                    await Task.Delay(50);
                    await InvokeAsync(StateHasChanged);
                }
                //Results[i] = fakeResultRoller.CreateSymbol(result.SlotSymbols[i]);
                Results[i] = resultingSymbols[i].Clone();
            }

            Balance += result.Payout;
            if (result.Payout > 150)
            {
                await hubConnection.SendAsync("BroadcastWin", Name, result.Payout);
            }
            if (result.Payout == 0)
            {
                Message = "YOU LOST!!";
            }
            else
            {
                Message = $"WINNNEEEERRRR +{result.Payout}";
            }
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("WinBroadcasted", (result) =>
        {
            Messages.Insert(0, result);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        Console.WriteLine("Connection established");
    }

    private async Task Play()
    {
        Message = "";
        if (hubConnection is not null)
        {
            Balance -= BetSize;
            await hubConnection.SendAsync("Play", Name, BetSize, IsPictureSymbols);
        }
    }

    private async Task ChangeSlotType()
    {
        IsPictureSymbols = !IsPictureSymbols;
        await InvokeAsync(StateHasChanged);
    }

    private string StyleForSymbol(Symbols symbol)
    {
        switch (symbol)
        {
            case Symbols.Orange:
                return "background-color: #FFA500; width: 100px; height: 100px; margin: 10px;";
            case Symbols.Red:
                return "background-color: #FF0000; width: 100px; height: 100px; margin: 10px;";
            case Symbols.Blue:
                return "background-color: #0000FF; width: 100px; height: 100px; margin: 10px;";
            case Symbols.Green:
                return "background-color: #00FF00; width: 100px; height: 100px; margin: 10px;";
            case Symbols.Yellow:
                return "background-color: #FFFF00; width: 100px; height: 100px; margin: 10px;";
            default:
                return "background-color: #FFFFFF; width: 100px; height: 100px; margin: 10px;";
        }
    }
}
