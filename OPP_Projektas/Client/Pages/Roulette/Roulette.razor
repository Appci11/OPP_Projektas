@*
Padariau atskira directory, nes planuoja but bent keli komponentai...
jei viskas i viena kruva eis... nu patys suprantam
PS. "@using blablabla" galima i _Imports.razor det, tuomet visiem puslapiam galios
*@

@page "/roulette"
@using OPP_Projektas.Shared.Models.Roulette.Iterator
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject State State
@implements IAsyncDisposable

<PageTitle>Roulette</PageTitle>
<h3>Roulette</h3>

@if (!IsConnected)
{
    <div class="input-group">
        <input @bind="username" class="form-control" placeholder="What's your name?">
        <button class="btn btn-primary form-control-append" @onclick="Connect">
            Connect
        </button>
    </div>
}
else
{
    <p>Number of players: @playerCount</p>
    <p>Number of bets placed: @betsPlacedCound</p>
    <br />
    <h3>Rolled number: @Wheel.WheelNumbers[RolledNumberIndex].Number @Wheel.WheelNumbers[RolledNumberIndex].Colour</h3>
    <br />
    if (!betPlaced)
    {
        <div class="pad10">
            <input id="betAmmount" @bind="BetAmmount" type="number" aria-label="Bet Ammount:" />
            <label for="betAmmount">Bet Ammount</label>

        </div class="pad10">
        <div>
            <input id="betNumber" @bind="BetNumber" type="number" aria-label="Bet on Number:" />
            <label for="betNumber">Number to Bet On</label>
            <button class="btn btn-primary" @onclick="() => PlaceABetNumber(BetNumber)">Bet On Selected Number</button>

        </div>
        <div class="pad10">
            <button class="btn btn-primary" @onclick="() => PlaceABetThird(1)">Bet 1-12</button>
            <button class="btn btn-primary" @onclick="() => PlaceABetThird(2)">Bet 13-24</button>
            <button class="btn btn-primary" @onclick="() => PlaceABetThird(3)">Bet 25-32</button>
        </div>
        <div class="pad10">
            <button class="btn btn-primary" @onclick="() => PlaceABetRed(1)">Bet Red</button>
            <button class="btn btn-primary" @onclick="() => PlaceABetBlack(2)">Bet Black</button>
        </div>
    }
    <br />
    <br />
    <h4>Your total chips value: @Keeper.Chips</h4>

    <p>Your chips:</p>

    <ChipsList ChipAmmounts="@NewKeeper.Chips" />

    <p>Message log:</p>
    <ul id="messagesList">
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>

    <input 
        @bind-value="cmdMessage"
        placeholder="command"
        @bind-value:event="oninput"
        @onkeyup="HandleInput"
        class="form-control"
        style="width: 60%;">

    <br />
    <button class="btn btn-primary" @onclick="LoadRouletteLog">Load Log</button>
    <br />
    <button hidden="@hide"  class="btn btn-primary" @onclick="OpenRouletteLog">Open Log</button>
}

@code {
    private HubConnection? hubConnection;
    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    Wheel Wheel = new Wheel();
    private string username = string.Empty;
    private int playerCount = 0;
    private int betsPlacedCound = 0;
    private int RolledNumberIndex = 0;
    private bool betPlaced = false;
    int BetAmmount = 1;
    int BetNumber = 0;
    private List<string> messages = new List<string>();

        bool hide = true;

    static ChipsKeeper Keeper = new ChipsKeeper();
    static IChipsConverter Adapter = new ChipsAdapter(Keeper);
    NewChipsKeeper NewKeeper = new NewChipsKeeper(Adapter.GetChips());
    //await LocalStorage.SetItemAsync("token", token);  //local storage example
    //await LocalStorage.RemoveItemAsync("token");  //galima ir asString, pasigooglinsit jei reiks


    private string cmdMessage = string.Empty;

        private async Task HandleInput(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter"))
        {
            if (hubConnection != null)
            {
                //siuncia signala i signalR hub
                //Console.WriteLine("Ieita i HandleInput");
                await hubConnection.SendAsync("GetCommandMessage", cmdMessage);
                cmdMessage = string.Empty;
            }
        }
    }


    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
            //jei nenorim nieko perduot tinka tiesiog kreiptis i hub'o endpoint'a
            //.WithUrl(NavigationManager.ToAbsoluteUri("/roulettehub"))
            //to pass smth query strings can be used
            .WithUrl(NavigationManager.ToAbsoluteUri($"/roulettehub?username={username}"))
            .Build();

        hubConnection.On<string>("GetMessage", (message) =>
        {
            var msg = message;
            if (messages.Count < 10)
            {
                messages.Add(msg);
            }
            else
            {
                messages.RemoveAt(0);
                messages.Add(msg);
            }
            //jei puslapyje kazkas kito, reiketu StateHasChanged() iskviest
            StateHasChanged();
        });

        hubConnection.On<int>("GetPlayerCount", (count) =>
        {
            playerCount = count;
            StateHasChanged();
        });

        hubConnection.On<int>("GetBetsPlacedCount", (count) =>
        {
            betsPlacedCound = count;
            StateHasChanged();
        });

        hubConnection.On<int>("GetRolledNumberIndex", (rolledNumberIndex) =>
        {
            RolledNumberIndex = rolledNumberIndex;
            betPlaced = false;
            StateHasChanged();
        });

        hubConnection.On<int>("GetWinnings", (winnings) =>
        {

            Keeper.AddChips(winnings);
            StateHasChanged();
        });

        hubConnection.On<List<string>>("GetLog", (Log) =>
        {
            State.RouletteLog = Log;
            StateHasChanged();  // kai visad naujam lange bus atidaroma nebereikes.
        });

        await hubConnection.StartAsync();
    }

    private async Task PlaceABetRed(int value)
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("PlaceABetRed", BetAmmount, value);
            betPlaced = true;
            Keeper.RemoveChips(BetAmmount);
            NewKeeper.Chips = Adapter.GetChips();
        }
    }
    private async Task PlaceABetBlack(int value)
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("PlaceABetBlack", BetAmmount, value);
            betPlaced = true;
            Keeper.RemoveChips(BetAmmount);
            NewKeeper.Chips = Adapter.GetChips();
        }
    }

    private async Task PlaceABetThird(int value)
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("PlaceABetThird", BetAmmount, value);
            betPlaced = true;
            Keeper.RemoveChips(BetAmmount);
            NewKeeper.Chips = Adapter.GetChips();
        }
    }

    private async Task PlaceABetNumber(int value)
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("PlaceABetNumber", BetAmmount, value);
            betPlaced = true;
            Keeper.RemoveChips(BetAmmount);
            NewKeeper.Chips = Adapter.GetChips();
        }
    }

    private async Task LoadRouletteLog()
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("SendLog");
        }
        hide = false;
    }
    private async Task OpenRouletteLog()
    {
        // pasiieskot kaip naujam lange visad atidaryt
        NavigationManager.NavigateTo("/roulettelog");
    }

    //copy pasta default dispose...
    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}